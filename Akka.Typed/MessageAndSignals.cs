#region copyright
// -----------------------------------------------------------------------
// <copyright file="MessageAndSignals.cs" company="Bartosz Sypytkowski">
//     Copyright (C) 2018-2018 Bartosz Sypytkowski <b.sypytkowski@gmail.com>
// </copyright>
// -----------------------------------------------------------------------
#endregion

using System;

namespace Akka.Typed
{
    /// <summary>
    /// System signals are notifications that are generated by the system and
    /// delivered to the Actor behavior in a reliable fashion (i.e. they are
    /// guaranteed to arrive in contrast to the at-most-once semantics of normal
    /// Actor messages).
    /// </summary>
    public interface ISignal { }

    /// <summary>
    /// Lifecycle signal that is fired upon restart of the Actor before replacing
    /// the behavior with the fresh one (i.e. this signal is received within the
    /// behavior that failed). The replacement behavior will receive PreStart as its
    /// first signal.
    /// </summary>
    public sealed class PreRestart : ISignal
    {
        public static readonly PreRestart Instance = new PreRestart();
        private PreRestart() { }
    }
    
    /// <summary>
    /// Envelope that is published on the eventStream for every message that is
    /// dropped due to overfull queues.
    /// </summary>
    [Equals]
    public sealed class Dropped
    {
        public object Message { get; }
        public IActorRef<Nothing> Recipient { get; }

        public Dropped(object message, IActorRef<Nothing> recipient)
        {
            Message = message;
            Recipient = recipient;
        }
    }

    /// <summary>
    /// Lifecycle signal that is fired upon restart of the Actor before replacing
    /// the behavior with the fresh one (i.e. this signal is received within the
    /// behavior that failed). The replacement behavior will receive PreStart as its
    /// first signal.
    /// </summary>
    public sealed class PreStart : ISignal
    {
        public static readonly PreStart Instance = new PreStart();
        private PreStart() { }
    }

    /// <summary>
    /// Lifecycle signal that is fired after this actor and all its child actors
    /// (transitively) have terminated. The [[Terminated]] signal is only sent to
    /// registered watchers after this signal has been processed.
    /// </summary>
    public sealed class PostStop : ISignal
    {
        public static readonly PostStop Instance = new PostStop();
        private PostStop() { }
    }

    /// <summary>
    /// Lifecycle signal that is fired when an Actor that was watched has terminated.
    /// Watching is performed by invoking the
    /// [[akka.actor.typed.scaladsl.ActorContext.watch]]. The DeathWatch service is
    /// idempotent, meaning that registering twice has the same effect as registering
    /// once. Registration does not need to happen before the Actor terminates, a
    /// notification is guaranteed to arrive after both registration and termination
    /// have occurred. This message is also sent when the watched actor is on a node
    /// that has been removed from the cluster when using akka-cluster or has been
    /// marked unreachable when using akka-remote directly.
    /// </summary>
    public sealed class Terminated : ISignal
    {
        public IActorRef<Nothing> ActorRef { get; }
        public Exception Reason { get; }

        public Terminated(IActorRef<Nothing> actorRef, Exception reason)
        {
            ActorRef = actorRef;
            Reason = reason;
        }
    }
}